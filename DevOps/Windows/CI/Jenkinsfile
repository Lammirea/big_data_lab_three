pipeline {
    agent any

    environment {
        DOCKERHUB_CREDS=credentials('lab_big_data_two')
        LC_ALL = "en_US.UTF-8"
        LANG    = "en_US.UTF-8"
        LANGUAGE = "en_US.UTF-8"
    }

    options {
        timestamps()
        skipDefaultCheckout(true)
    }
    
    stages {
        stage('Clone github repository') {
            steps {
                cleanWs()
                bat 'chcp 65001 && git clone -b develop https://github.com/Lammirea/big_data_lab_second.git  '
            }
        }

        stage('Checkout repo dir') {
            steps {
                bat 'chcp 65001 && cd big_data_lab_second && dir'
            }
        }


        stage('Run Unit Tests (in Docker)') {
            steps {
                dir('big_data_lab_second') {
                    bat '''
                        chcp 65001
                        REM run tests inside official python image; mounts repo into /app
                        docker run --rm -v "%cd%":/app -w /app python:3.11-bullseye bash -lc " \
                        python -m pip install --upgrade pip setuptools wheel && \
                        pip install -r requirements.txt coverage pytest --root-user-action=ignore && \
                        coverage run -m pytest src/unit_tests -q --maxfail=1 --disable-warnings && \
                        coverage report -m \
                        "
                    '''
                }
            }
        }


        stage('Login'){
            steps{
                bat 'chcp 65001 && docker login -u %DOCKERHUB_CREDS_USR% -p %DOCKERHUB_CREDS_PSW%'
            }
        }

        stage('Create and run docker container') {
            steps {
                script {
                    try {
                        bat 'chcp 65001 && cd big_data_lab_second && docker-compose build'
                    }
                    finally {
                        dir('big_data_lab_second') {
                            withCredentials([
                                string(credentialsId: 'redis-password', variable: 'REDIS_PASSWORD'),
                                string(credentialsId: 'redis-host', variable: 'REDIS_HOST'),
                                string(credentialsId: 'redis-port', variable: 'REDIS_PORT'),
                                string(credentialsId: 'redis-db', variable: 'REDIS_DB')
                            ]) {
                                bat '''
                                    chcp 65001
                                    echo REDIS_HOST=%REDIS_HOST% >> .env
                                    echo REDIS_PORT=%REDIS_PORT% >> .env
                                    echo REDIS_DB=%REDIS_DB% >> .env
                                    echo REDIS_PASSWORD=%REDIS_PASSWORD% >> .env
                                    docker-compose up -d
                                '''
                            }
                        }
                    }
                }
            }
        }

        stage('Checkout container logs') {
            steps {
                dir("big_data_lab_second") {
                    bat '''
                        chcp 65001
                        docker-compose up -d
                        
                        REM Получаем ID контейнера по имени сервиса (например, web)
                        for /f "tokens=*" %%i in ('docker ps -qf "name=big_data_lab_second-web-1"') do set containerId=%%i
                        
                        echo Container ID: %containerId%
                        
                        if "%containerId%"=="" (
                            echo "No container running"
                        ) else (
                            docker logs --tail 1000 -f %containerId%
                        )
                    '''
                }
            }
        }

        stage('Checkout coverage report'){
            steps{
                dir("big_data_lab_second"){
                    bat '''
                        chcp 65001
                        docker-compose logs -t --tail 10
                    '''
                }
            }
        }

        stage('Push'){
            steps{
                bat 'chcp 65001 && docker push derelia/big_data_lab_second:latest'
            }
        }
    }

    post {
        always {
            bat '''
                chcp 65001
                docker stop big_data_lab_second-web-1 || exit /b 0
                docker rm big_data_lab_second-web-1 || exit /b 0
                docker stop redis_db || exit /b 0
                docker rm redis_db || exit /b 0
                docker rmi derelia/big_data_lab_second:latest || exit /b 0
                docker rmi redis:latest || exit /b 0
                docker logout
            '''
            cleanWs()
        }
    }
}